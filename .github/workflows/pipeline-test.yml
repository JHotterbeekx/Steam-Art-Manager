name: Pipeline Test
on: [pull_request]

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v3

      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Conventional Changelog Action
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3
        with:
          config-file-path: "./commitlintrc.json"
          skip-version-file: "true"
          github-token: ${{ secrets.github_token }}
          output-file: "false"

      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `app-v${process.env.PACKAGE_VERSION}`,
              name: `Desktop App v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            return data.id


  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-20.04, windows-latest]
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev librsvg2-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: 'npm' # Set this to npm, yarn or pnpm.

      - name: Install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: npm install # Change this to npm, yarn or pnpm.

      - name: Date
        run: echo "DATE=$(date +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      - name: Conventional Changelog Action
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3
        with:
          config-file-path: "./commitlintrc.json"
          skip-version-file: "true"
          github-token: ${{ secrets.github_token }}
          output-file: "false"

      - name: Create Release
        uses: actions/create-release@v1
        if: ${{ steps.changelog.outputs.skipped == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          tag_name: ${{ steps.changelog.outputs.tag }}
          release_name: ${{ steps.changelog.outputs.tag }}
          body: ${{ steps.changelog.outputs.clean_changelog }}

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        id: build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: "v$PACKAGE_VERSION"
          releaseName: 'Steam Art Manager v__VERSION__' # tauri-action replaces \_\_VERSION\_\_ with the app version.
          releaseBody: ${{ steps.changelog.outputs.clean_changelog }}
          draft: false
          releaseDraft: true
          prerelease: false
  
  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-20.04, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3

      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install frontend dependencies
        run: npm install # change this to npm or pnpm depending on which one you use

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, build-tauri-linux, build-tauri-windows]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })

  updateGist:
    needs: ["release"]
    permissions:
      contents: write
    runs-on: "windows-latest"
    
    steps:
      - name: Read linux release sig
        id: readLinux
        uses: juliangruber/read-file-action@v1
        with:
          path: "https://github.com/Tormak9970/Steam-Art-Manager/releases/download/v$PACKAGE_VERSION/Steam Art Manager_$PACKAGE_VERSION_en-US.AppImage.tar.gz.sig"
      
      - name: Read windows release sig
        id: readWindows
        uses: juliangruber/read-file-action@v1
        with:
          path: "https://github.com/Tormak9970/Steam-Art-Manager/releases/download/v$PACKAGE_VERSION/Steam Art Manager_$PACKAGE_VERSION_en-US.msi.zip.sig"

      - name: WriteGist
        uses: sergeysova/gist-write-action@v1
        with:
          gist_id: a72aa3b7232033772d80b0ed86303f01
          file_name: sarm_version.json
          content: |
            {
              "version": "v$PACKAGE_VERSION",
              "notes": "${{ steps.Changelog.outputs.changelog }}",
              "pub_date": "2020-06-22T19:25:57Z",
              "platforms": {
                "linux-x86_64": {
                  "signature": "${{ steps.readLinux.output.content }}",
                  "url": "https://github.com/Tormak9970/Steam-Art-Manager/releases/download/v$PACKAGE_VERSION/Steam Art Manager_$PACKAGE_VERSION_en-US.AppImage.tar.gz"
                },
                "windows-x86_64": {
                  "signature": "${{ steps.readWindows.output.content }}",
                  "url": "https://github.com/Tormak9970/Steam-Art-Manager/releases/download/v$PACKAGE_VERSION/Steam Art Manager_$PACKAGE_VERSION_en-US.msi.zip"
                }
              }
            }
  
