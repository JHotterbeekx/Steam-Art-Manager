name: Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-20.04, windows-latest]
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        # You can remove libayatana-appindicator3-dev if you don't use the system tray feature.
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: 'yarn' # Set this to npm, yarn or pnpm.

      - name: Install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: yarn install # Change this to npm, yarn or pnpm.

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        id: build
        
      - name: Date
        run: echo "DATE=$(date +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      - name: Changelog
        uses: scottbrenner/generate-changelog-action@master
        id: Changelog
        with:
          exclude: ["build"]

      - name: Read linux release sig
        if: matrix.platform == 'ubuntu-20.04'
        id: readLinux
        uses: juliangruber/read-file-action@v1
        with:
          path: ${{ steps.build.outputs.artifacts[steps.build.outputs.artifacts.length - 1] }}
      
      - name: Set linux sig
        if: matrix.platform == 'ubuntu-20.04'
        run: echo "LINUX_SIG=${{ steps.readLinux.output.content }}" >> $GITHUB_ENV
      
      - name: Read windows release sig
        if: matrix.platform == 'windows-latest'
        id: readWindows
        uses: juliangruber/read-file-action@v1
        with:
          path: ${{ steps.build.outputs.artifacts[steps.build.outputs.artifacts.length - 1] }}
        
      - name: Set windows sig
        if: matrix.platform == 'windows-latest'
        run: echo "WINDOWS_SIG=${{ steps.readWindows.output.content }}" >> $GITHUB_ENV

      - name: WriteGist
        if: $LINUX_SIG != "" && $WINDOWS_SIG != ""
        uses: sergeysova/gist-write-action@v1
        with:
          gist_id: a72aa3b7232033772d80b0ed86303f01
          file_name: sarm_version.json
          content: |
            {
              "version": "${{ github.ref_name }}",
              "notes": "${{ steps.Changelog.outputs.changelog }}",
              "pub_date": "2020-06-22T19:25:57Z",
              "platforms": {
                "linux-x86_64": {
                  "signature": "$LINUX_SIG",
                  "url": "https://github.com/Tormak9970/Steam-Art-Manager/releases/download/v${{ github.ref_name }}/Steam Art Manager_${{ github.ref_name }}_en-US.AppImage.tar.gz"
                },
                "windows-x86_64": {
                  "signature": "$WINDOWS_SIG",
                  "url": "https://github.com/Tormak9970/Steam-Art-Manager/releases/download/v${{ github.ref_name }}/Steam Art Manager_${{ github.ref_name }}_en-US.msi.zip"
                }
              }
            }
            
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }} # This only works if your workflow triggers on new tags.
          releaseName: 'Steam Art Manager v__VERSION__' # tauri-action replaces \_\_VERSION\_\_ with the app version.
          releaseBody: |
            ${{ steps.Changelog.outputs.changelog }}
          draft: false
          releaseDraft: true
          prerelease: false
